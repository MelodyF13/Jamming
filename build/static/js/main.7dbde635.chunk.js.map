{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","myList","map","id","SearchResults","searcResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","namme","uri","savePlayList","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","savePlaylist","find","savedTrack","push","filter","currentTrack","searchResults","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7dbde635.chunk.js","sourcesContent":["const clientId  = \"cdc75a63a6524354ac76ebb9ddc29ce2\";\nconst redirectUri = \"http://tricky-debt.surge.sh\";\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        } \n\n        //check for access token match\n        const accessTokenMatch = window.location.href.match(/accessToken=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n            // This clears the parameters, allowing us to grab a new access token when it expires.\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        }).then(response => {\n            return response.json();\n        }).then(jsonResponse => {\n            if (!jsonResponse.tracks) {\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].namme,\n                album: track.album.name,\n                uri: track.uri\n            }));\n        });\n    },\n\n    savePlayList(name, trackUris) {\n        if (!name || !trackUris.length) {\n            return;\n        }\n\n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}`};\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me', {headers: headers}\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ name: name})\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({ uris: trackUris })\n                })\n            })\n        })\n    }\n\n}\n\nexport default Spotify","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            term: ''\n        }\n\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n\n    search() {\n        this.props.onSearch(this.state.term);\n    }\n\n    handleTermChange(event) {\n        this.setState({ term: event.target.value });\n\n    }\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n            <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\n            <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n    constructor(props) {\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n\n    renderAction() {\n        if (this.props.isRemoval) {\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n        } else {\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n        }\n    }\n\n    addTrack() {\n        this.props.onAdd(this.props.track);\n    }\n\n    removeTrack() {\n        this.props.onRemove(this.props.track);\n    }\n\n    render() {\n        return (\n            <div className=\"Track\">\n            <div className=\"Track-information\">\n            <h3>{this.props.track.name}</h3>\n            <p>{this.props.track.artist} | {this.props.track.album} </p>\n            </div>\n            {this.renderAction()}\n            </div>\n        )\n    }\n}\n\nexport default Track","import React from 'react';\nimport './TrackList.css';\n\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\n    render() {\n        if (this.props.tracks) {\n            var myList = this.props.tracks.map(track => {\n                return <Track id={track.id} track={track} />\n            })\n        }\n        return (\n            <div className=\"TrackList\">\n                { myList }\n            </div>\n        )\n    }\n}\n\nexport default TrackList","import React from 'react';\nimport './SearchResults.css';\n\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n    render() {\n        return (\n        <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList tracks={this.props.searcResults} \n                    onAdd={this.props.onAdd}\n                    isRemoval={false} />\n        </div>\n        )\n    }\n}\n\nexport default SearchResults","import React from 'react';\nimport './Playlist.css';\n\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n   \n    handleNameChange(event) {\n        this.props.onNameChange(event.target.value);\n    }\n\n    render() {\n        return (\n        <div className=\"Playlist\">\n        <input defaultValue={'New Playlist'} onChange={this.handleNameChange} />\n        <TrackList tracks={this.props.playlistTracks} \n                    onRemove={this.props.onRemove} \n                    isRemoval={true} />\n        <button className=\"Playlist-save\" onClick={this.props.onSave} >SAVE TO SPOTIFY</button>\n        </div>\n        )\n    }\n}\n\nexport default Playlist","import React from 'react';\nimport './App.css';\n\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      SearchResults: [], \n      playlistName: 'My Playlist',\n      playlistTracks: []\n    };\n\n    this.addTrack = this.addTrack.bind(this); \n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  }\n\n    removeTrack(track) {\n      let tracks = this.state.playlistTracks;\n      tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n      this.setState({playlistTracks: tracks });\n    }\n\n    updatePlaylistName(name) {\n      this.setState({ playlistName: name });\n    }\n\n    savePlaylist() {\n      const trackUris = this.state.playlistTracks.map(track => track.uri);\n      Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n        this.setState({\n          playlistName: 'New Playlist',\n          playlistTracks: []\n        })\n      })\n    }\n\n    search(term) {\n      Spotify.search(term).then(SearchResults => {\n        this.setState({ SearchResults: SearchResults })\n      })\n    }\n\n  render() {\n    return (\n      <div>\n  <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n  <div className=\"App\">\n    <SearchBar onSearch={this.search} />\n    <div className=\"App-playlist\">\n      <SearchResults searchResults={this.state.searchResults} \n                     onAdd={this.addTrack} />\n      <Playlist playlistName={this.state.playlistName}\n                playlistTracks={this.state.playlistTracks} \n                onRemove={this.removeTrack} \n                onNameChange={this.updatePlaylistName} \n                onSave={this.savePlaylist} />\n    </div>\n  </div>\n</div>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}